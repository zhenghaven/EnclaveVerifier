use enclave_verifier::type_checker;

use enclave_verifier::ast;

//Later we will be able to read the bytecode generated by gen_byte_code
fn read_byte_code_from_file() -> ast::aexp::Aexp
{
	use enclave_verifier::ast::*;
	use aexp::constructor_helper::*;
	use exp::constructor_helper::*;

	let fun_exp_list_1 = vec![(10i32.to_aexp() + 20i32.to_aexp()).to_exp()];
	let fun_call_1 = func_general::FnCall::new("foo".to_string(), fun_exp_list_1);

	let fun_exp_list_2 = vec![
			(5i32.to_aexp() - 2i32.to_aexp()).to_exp(),
			(2.5f32.to_aexp() * 2i32.to_aexp()).to_exp(),
		];
	let fun_call_2 = func_general::FnCall::new("bar".to_string(), fun_exp_list_2);

	aexp::Aexp::FnCall{fc : fun_call_1} + aexp::Aexp::FnCall{fc : fun_call_2} / 1i32.to_aexp() % 2i32.to_aexp() + "x".to_aexp()
}

fn main()
{
    println!("\nIteration test:\n");
    let exp = read_byte_code_from_file();
    type_checker::type_checker::iterate_through_ast(exp);
    println!("");
}
